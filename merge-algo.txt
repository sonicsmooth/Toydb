
         a                 a                                  a
         b                 b           ->                     b
      c     g            f   g                            c   f    g 
     d e   j k              h i                          d e     h i j k

    (a(b(cde)(gjk)))    (a(bf(ghi))) ->               (a(b(cde)f(ghijk)))
     

           a       a        a              a          a  c
                   b       bcd             b          b  d
                                          c d
          (a)     (ab)    (abcd)        (a(bcd))     ((ab)(cd))
first      a      single  single        single       list
second    nil     single  single        list         list
rest      ()      list    list          listlist     listlist
define    single  chain   chain         chain        par

singlefy removes extra parens around items, except if the first item is a single list

singlefy (a)       -> a or (a)
singlefy ((a))     -> a or (a)
singlefy (a b)     -> (a b)
singlefy (a (b))   -> (a b)
singlefy (a (b) c) -> (a b c)
singlefy ((a) b)   -> ((a) b)


push-child adds element to the last head in the list
push-sib adds element to the next-to-last head in the list

push-child nil a   -> a
push-sib   nil a   -> a

push-child a nil   -> a
push-sib   a nil   -> a

push-child a b     -> (a b)
push-sib   a b     -> ((a) b)

push-child (a) nil -> a
push-sib   (a) nil -> a

push-child (a) b   -> (a b)
push-sib   (a) b   -> ((a) b)

push-child (a) (b) -> (a (b)) -> (a b)
push-sib   (a) (b) -> ((a) (b)) -> ((a) b)

push-child (a b) c -> (a (b c))
push-sib   (a b) c -> (a b c)

push-child (a b) (c d) -> (a (b (c d)))
push-sib   (a b) (c d) -> (a b (c d))

push-child ((a) b) (c d) -> ((a) (b (c d)))
push-sib   ((a) b) (c d) -> ((a) b (c d))

push-child (a (b (c))) d -> (a (b (c d)))
push-sib   (a (b (c))) d -> (a (b (c) d)) -> (a (b c d))

push-child ((a b) (c d)) e -> ((a b) (c d e))
push-sib   ((a b) (c d)) e -> ((a b) (c d) e)

push-child ((a b) (c (d (e f)))) g -> ((a b) (c (d (e f g))))
push-sib   ((a b) (c (d (e f)))) g -> ((a b) (c (d (e f) g)))




attempt matches.  possibilities are

                   left       right            match?        action
                   -------------------------------------------------------------------------------
    a   b          single     single           match?        remove, push-into
                                                             else return compound

    a   b          single     chain            first match?  remove, push-into
        c                                                    else return compound

    a   c e        single     par              NA            attempt merge left with first right  
        d f                                                  else attempt merge left with second right
                                                             else return compound

    a   c          chain      chain            first match?  remove, push-into
    b   d                                                    else return compound
        
    a   c e        chain      par              NA            attempt merge left with first right  
    b   d f                                                  else attempt merge left with second right
                                                             else return compound

    a c  e g       par        par              NA            reduce all 4 merges
    b d  f h                                                 

    (a(bc)d) -> (a(bcd))
    (a(d)(bc))-> (ad(bc))
    

check 
if nil and single, then remove and push-single-into
elseif nil and chain, then remove and push-chain-into
elseif single match single, then remove and push-single-into
elseif single match chain-head, then remove and push-chain-into
elseif chain-head match chain-head, then remove and push-chain-into
else if either left or right is par, define m*n merge attempts
    for a and b in each defined merge
        merge attempt a and b
        if successful, push result
        remove a and b from merge attempts
    end
    
when removing first, if second of second is single, then make into a list


    
    
()                   (a(b(cde)(gjk)))    (a(bf(ghi)))          ;; chain-head match chain-head, remove, a() push-chain-into
(a())                  (b(cde)(gjk))       (bf(ghi))           ;; chain-head match chain-head, remove, push-chain-into
(a(b()))                ((cde)(gjk))      ((f)(ghi)))          ;; define 6 match attempts.  show (gjk) (ghi) here
        ()                    (gjk)           (ghi)            ;; chain-head match chain-head, remove, push-chain-into
        (g)                   ((j)k)          ((h)i))          ;; define 4 match attempts.
           ()                  (j)             (h)             ;; nope, push (j)(h), remove (j),(h)
           ((j)(h))             ()              ()             ;; done, 1 match attempt left
           ((j)(h))            (k)             (i)             ;; nope, push (k)(i), remove (k),(i)
           ((j)(h)(k)(i))       ()              ()             ;; done
        (g(j)(h)(k)(i))                                        ;; singleify
        (gjhki)                                                ;; push-chain-into
(a(b(gjhki)))           ((cde))           ((f))                ;; 4 match attempts left.  all fail. push-into (cdo)(f)
(a(b(gjhik)(cde)(f)))     ()                ()                 ;; done
                
            
    
    

